openapi: 3.0.0
info:
  title: Portfolio-4 API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /auth/login:
    post:
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
  /users/{user_id}:
    get:
      summary: Get user profile
      operationId: getUserProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /portfolio:
    get:
      summary: Get projects portfolio
      operationId: getProjects
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - title
              - created_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      summary: Create a new project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectInput"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  /portfolio/{project_id}:
    get:
      summary: Get detailed project information
      operationId: getProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    patch:
      summary: Update a project
      operationId: updateProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectInput"
      responses:
        "200":
          description: Project updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted
  /testimonials:
    get:
      summary: Get all testimonials
      operationId: getTestimonials
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - content
              - created_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: List of testimonials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Testimonial"
    post:
      summary: Create a new testimonial
      operationId: createTestimonial
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTestimonialInput"
      responses:
        "201":
          description: Testimonial created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testimonial"
  /testimonials/{testimonial_id}:
    patch:
      summary: Update a testimonial
      operationId: updateTestimonial
      parameters:
        - name: testimonial_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTestimonialInput"
      responses:
        "200":
          description: Testimonial updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Testimonial"
    delete:
      summary: Delete a testimonial
      operationId: deleteTestimonial
      parameters:
        - name: testimonial_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Testimonial deleted
  /services:
    get:
      summary: Get all services
      operationId: getServices
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - title
              - created_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    post:
      summary: Create a new service
      operationId: createService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceInput"
      responses:
        "201":
          description: Service created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
  /services/{service_id}:
    patch:
      summary: Update a service
      operationId: updateService
      parameters:
        - name: service_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceInput"
      responses:
        "200":
          description: Service updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    delete:
      summary: Delete a service
      operationId: deleteService
      parameters:
        - name: service_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Service deleted
  /blog:
    get:
      summary: Get a list of blog posts
      operationId: getBlogPosts
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - title
              - created_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
    post:
      summary: Create a new blog post
      operationId: createBlogPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBlogPostInput"
      responses:
        "201":
          description: Blog post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
  /blog/{post_slug}:
    get:
      summary: Get blog post details
      operationId: getBlogPost
      parameters:
        - name: post_slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Blog post details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
    patch:
      summary: Update a blog post
      operationId: updateBlogPost
      parameters:
        - name: post_slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBlogPostInput"
      responses:
        "200":
          description: Blog post updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
    delete:
      summary: Delete a blog post
      operationId: deleteBlogPost
      parameters:
        - name: post_slug
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Blog post deleted
  /contact:
    post:
      summary: Submit a contact request
      operationId: createContactRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContactRequestInput"
      responses:
        "201":
          description: Contact request submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactRequest"
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        password_hash:
          type: string
    CreateUserInput:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password_hash:
          type: string
      required:
        - email
        - name
        - password_hash
    Project:
      type: object
      properties:
        project_id:
          type: string
        title:
          type: string
        description:
          type: string
          nullable: true
        media_urls:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        category:
          type: string
          nullable: true
    CreateProjectInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        media_urls:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
      required:
        - title
    Testimonial:
      type: object
      properties:
        testimonial_id:
          type: string
        project_id:
          type: string
        user_id:
          type: string
        content:
          type: string
        rating:
          type: number
          nullable: true
        created_at:
          type: string
          format: date-time
    CreateTestimonialInput:
      type: object
      properties:
        project_id:
          type: string
        user_id:
          type: string
        content:
          type: string
        rating:
          type: number
          nullable: true
      required:
        - project_id
        - user_id
        - content
    Service:
      type: object
      properties:
        service_id:
          type: string
        title:
          type: string
        description:
          type: string
          nullable: true
        pricing:
          type: number
          nullable: true
        created_at:
          type: string
          format: date-time
    CreateServiceInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        pricing:
          type: number
          nullable: true
      required:
        - title
    BlogPost:
      type: object
      properties:
        post_id:
          type: string
        post_slug:
          type: string
        title:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
        category:
          type: string
          nullable: true
    CreateBlogPostInput:
      type: object
      properties:
        post_slug:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          type: string
          nullable: true
      required:
        - post_slug
        - title
        - content
    ContactRequest:
      type: object
      properties:
        request_id:
          type: string
        name:
          type: string
        email:
          type: string
        message:
          type: string
        created_at:
          type: string
          format: date-time
    CreateContactRequestInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        message:
          type: string
      required:
        - name
        - email
        - message
